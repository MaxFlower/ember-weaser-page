{"version":3,"sources":["weather-app/tests/adapters/application.jshint.js","weather-app/tests/adapters/weather.jshint.js","weather-app/tests/app.jshint.js","weather-app/tests/components/city-weather.jshint.js","weather-app/tests/components/main-header.jshint.js","weather-app/tests/controllers/weather.jshint.js","weather-app/tests/helpers/destroy-app.js","weather-app/tests/helpers/destroy-app.jshint.js","weather-app/tests/helpers/module-for-acceptance.js","weather-app/tests/helpers/module-for-acceptance.jshint.js","weather-app/tests/helpers/resolver.js","weather-app/tests/helpers/resolver.jshint.js","weather-app/tests/helpers/start-app.js","weather-app/tests/helpers/start-app.jshint.js","weather-app/tests/integration/components/city-weather-test.js","weather-app/tests/integration/components/city-weather-test.jshint.js","weather-app/tests/integration/components/main-header-test.js","weather-app/tests/integration/components/main-header-test.jshint.js","weather-app/tests/models/weather.jshint.js","weather-app/tests/resolver.jshint.js","weather-app/tests/router.jshint.js","weather-app/tests/routes/contact.jshint.js","weather-app/tests/routes/index.jshint.js","weather-app/tests/routes/weather.jshint.js","weather-app/tests/serializers/weather.jshint.js","weather-app/tests/test-helper.js","weather-app/tests/test-helper.jshint.js","weather-app/tests/unit/adapters/application-test.js","weather-app/tests/unit/adapters/application-test.jshint.js","weather-app/tests/unit/adapters/weather-test.js","weather-app/tests/unit/adapters/weather-test.jshint.js","weather-app/tests/unit/controllers/weather-test.js","weather-app/tests/unit/controllers/weather-test.jshint.js","weather-app/tests/unit/models/weather-test.js","weather-app/tests/unit/models/weather-test.jshint.js","weather-app/tests/unit/routes/contact-test.js","weather-app/tests/unit/routes/contact-test.jshint.js","weather-app/tests/unit/routes/index-test.js","weather-app/tests/unit/routes/index-test.jshint.js","weather-app/tests/unit/routes/weather-test.js","weather-app/tests/unit/routes/weather-test.jshint.js","weather-app/tests/unit/serializers/city-weather-test.js","weather-app/tests/unit/serializers/city-weather-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"names":["define","exports","QUnit","module","test","assert","expect","ok","_ember","destroyApp","application","run","_qunit","_weatherAppTestsHelpersStartApp","_weatherAppTestsHelpersDestroyApp","Promise","RSVP","name","options","arguments","length","undefined","beforeEach","this","apply","afterEach","_this","resolve","then","_weatherAppResolver","_weatherAppConfigEnvironment","resolver","create","namespace","modulePrefix","podModulePrefix","_weatherAppApp","startApp","attrs","attributes","merge","APP","setupForTesting","injectTestHelpers","_emberQunit","moduleForComponent","integration","render","Ember","HTMLBars","template","meta","revision","loc","source","start","line","column","end","isEmpty","arity","cachedFragment","hasRendered","buildFragment","dom","el0","createDocumentFragment","el1","createComment","appendChild","buildRenderNodes","fragment","contextualElement","morphs","Array","createMorphAt","insertBoundary","statements","locals","templates","equal","$","text","trim","child0","createTextNode","_weatherAppTestsHelpersResolver","setResolver","moduleFor","adapter","subject","controller","_emberData","Weather","moduleForModel","Model","extend","coordinatelon","attr","coordinatelat","country","sunrise","sunset","description","temp","humidity","pressure","temp_min","temp_max","windspeed","winddeg","clouds","rain","snow","date","cityname","cityid","model","set","get","route","needs","record","serializedRecord","serialize","require","EmberENV","TESTS_FILE_LOADED"],"mappings":"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","file":"tests.js","sourcesContent":["define('weather-app/tests/adapters/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass jshint.');\n  });\n});","define('weather-app/tests/adapters/weather.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/weather.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/weather.js should pass jshint.');\n  });\n});","define('weather-app/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('weather-app/tests/components/city-weather.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/city-weather.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/city-weather.js should pass jshint.');\n  });\n});","define('weather-app/tests/components/main-header.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/main-header.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/main-header.js should pass jshint.');\n  });\n});","define('weather-app/tests/controllers/weather.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/weather.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/weather.js should pass jshint.');\n  });\n});","define('weather-app/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('weather-app/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('weather-app/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'weather-app/tests/helpers/start-app', 'weather-app/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _weatherAppTestsHelpersStartApp, _weatherAppTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _weatherAppTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _weatherAppTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('weather-app/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('weather-app/tests/helpers/resolver', ['exports', 'weather-app/resolver', 'weather-app/config/environment'], function (exports, _weatherAppResolver, _weatherAppConfigEnvironment) {\n\n  var resolver = _weatherAppResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _weatherAppConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _weatherAppConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('weather-app/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('weather-app/tests/helpers/start-app', ['exports', 'ember', 'weather-app/app', 'weather-app/config/environment'], function (exports, _ember, _weatherAppApp, _weatherAppConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _weatherAppConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _weatherAppApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('weather-app/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('weather-app/tests/integration/components/city-weather-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('city-weather', 'Integration | Component | city weather', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 16\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'city-weather', ['loc', [null, [1, 0], [1, 16]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.7.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.7.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'city-weather', [], [], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('weather-app/tests/integration/components/city-weather-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/city-weather-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/city-weather-test.js should pass jshint.');\n  });\n});","define('weather-app/tests/integration/components/main-header-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('main-header', 'Integration | Component | main header', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    assert.expect(0);\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 15\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'main-header', ['loc', [null, [1, 0], [1, 15]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n  });\n});","define('weather-app/tests/integration/components/main-header-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/main-header-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/main-header-test.js should pass jshint.');\n  });\n});","define('weather-app/tests/models/weather.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/weather.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/weather.js should pass jshint.');\n  });\n});","define('weather-app/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('weather-app/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('weather-app/tests/routes/contact.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/contact.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/contact.js should pass jshint.');\n  });\n});","define('weather-app/tests/routes/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass jshint.');\n  });\n});","define('weather-app/tests/routes/weather.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/weather.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/weather.js should pass jshint.');\n  });\n});","define('weather-app/tests/serializers/weather.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | serializers/weather.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/weather.js should pass jshint.');\n  });\n});","define('weather-app/tests/test-helper', ['exports', 'weather-app/tests/helpers/resolver', 'ember-qunit'], function (exports, _weatherAppTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_weatherAppTestsHelpersResolver['default']);\n});","define('weather-app/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('weather-app/tests/unit/adapters/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('weather-app/tests/unit/adapters/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/adapters/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass jshint.');\n  });\n});","define('weather-app/tests/unit/adapters/weather-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:weather', 'Unit | Adapter | weather', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('weather-app/tests/unit/adapters/weather-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/adapters/weather-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/weather-test.js should pass jshint.');\n  });\n});","define('weather-app/tests/unit/controllers/weather-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:weather', 'Unit | Controller | weather', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('weather-app/tests/unit/controllers/weather-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/weather-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/weather-test.js should pass jshint.');\n  });\n});","define('weather-app/tests/unit/models/weather-test', ['exports', 'ember', 'ember-qunit', 'ember-data'], function (exports, _ember, _emberQunit, _emberData) {\n\n\t\tvar Weather;\n\t\tvar run = _ember['default'].run;\n\n\t\t(0, _emberQunit.moduleForModel)('weather', 'Unit | Model | weather', {\n\t\t\t\tbeforeEach: function beforeEach() {\n\t\t\t\t\t\tWeather = _emberData['default'].Model.extend({\n\t\t\t\t\t\t\t\tcoordinatelon: _emberData['default'].attr('number'),\n\t\t\t\t\t\t\t\tcoordinatelat: _emberData['default'].attr('number'),\n\t\t\t\t\t\t\t\tcountry: _emberData['default'].attr('string'),\n\t\t\t\t\t\t\t\tsunrise: _emberData['default'].attr('number'),\n\t\t\t\t\t\t\t\tsunset: _emberData['default'].attr('number'),\n\t\t\t\t\t\t\t\tdescription: _emberData['default'].attr('string'),\n\t\t\t\t\t\t\t\ttemp: _emberData['default'].attr('number'),\n\t\t\t\t\t\t\t\thumidity: _emberData['default'].attr('number'),\n\t\t\t\t\t\t\t\tpressure: _emberData['default'].attr('number'),\n\t\t\t\t\t\t\t\ttemp_min: _emberData['default'].attr('number'),\n\t\t\t\t\t\t\t\ttemp_max: _emberData['default'].attr('number'),\n\t\t\t\t\t\t\t\twindspeed: _emberData['default'].attr('number'),\n\t\t\t\t\t\t\t\twinddeg: _emberData['default'].attr('number'),\n\t\t\t\t\t\t\t\tclouds: _emberData['default'].attr('number'),\n\t\t\t\t\t\t\t\train: _emberData['default'].attr('string'),\n\t\t\t\t\t\t\t\tsnow: _emberData['default'].attr('string'),\n\t\t\t\t\t\t\t\tdate: _emberData['default'].attr('number'),\n\t\t\t\t\t\t\t\tcityname: _emberData['default'].attr('string'),\n\t\t\t\t\t\t\t\tcityid: _emberData['default'].attr('number')\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t});\n\n\t\t(0, _emberQunit.test)('it model exists', function (assert) {\n\t\t\t\tvar model = this.subject();\n\n\t\t\t\trun(function () {\n\t\t\t\t\t\tmodel.set('cityname', 'London');\n\t\t\t\t\t\tassert.equal(model.get('cityname'), 'London');\n\t\t\t\t});\n\t\t});\n});","define('weather-app/tests/unit/models/weather-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/weather-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/weather-test.js should pass jshint.');\n  });\n});","define('weather-app/tests/unit/routes/contact-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:contact', 'Unit | Route | contact', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('weather-app/tests/unit/routes/contact-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/contact-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/contact-test.js should pass jshint.');\n  });\n});","define('weather-app/tests/unit/routes/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('weather-app/tests/unit/routes/index-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass jshint.');\n  });\n});","define('weather-app/tests/unit/routes/weather-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:weather', 'Unit | Route | weather', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('weather-app/tests/unit/routes/weather-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/weather-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/weather-test.js should pass jshint.');\n  });\n});","define('weather-app/tests/unit/serializers/city-weather-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('weather', 'Unit | Serializer | weather', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:weather']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('weather-app/tests/unit/serializers/city-weather-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/serializers/city-weather-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/city-weather-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('weather-app/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"]}